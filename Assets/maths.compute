#pragma kernel CSMain

RWTexture2D<float4> result;


cbuffer MandelBrotCB
{
    int _Width;
    int _Height;
    float _Zoom;
    float2 _Offset;
    int MAX_ITERATIONS;
}

int Mandelbrot(float a, float b)
{
    // -> where z = 0
    float zx = 0, zy = 0;
    int iteration = 0;
    
    while (zx * zx + zy * zy < 4 && iteration < MAX_ITERATIONS)
    {
        float temp = zx * zx - zy * zy + a;
        zy = 2 * zx * zy + b;
        zx = temp;
        
        iteration++;
    }
    return iteration;
}


[numthreads(24, 24, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Width || id.y >= _Height) return;
    
    float aspect = (float) _Width / (float) _Height;
    
    float xMin = _Offset.x - 2.0 / _Zoom;
    float xMax = _Offset.x + 2.0 / _Zoom;
    float yMin = _Offset.y - 2.0f / (_Zoom * aspect);
    float yMax = _Offset.y + 2.0f / (_Zoom * aspect);
    
    double a = xMin + (xMax - xMin) * id.x / _Width;
    double b = yMin + (yMax - yMin) * id.y / _Height;
    
    int iteration = Mandelbrot(a, b);
     // Map iteration to a color
    float4 color;
    if (iteration == MAX_ITERATIONS)
    {
        color = float4(0, 0, 0, 1.0); // Black for points in the set
    }
    else
    {
        // Map iteration to a color gradient
        float t = (float) iteration / MAX_ITERATIONS;
        color = float4(
            sin(t * 3.14159 * 2) + 1, // Red
            sin(t * 3.14159 * 2 + 2.0944) + 1, // Green
            sin(t * 3.14159 * 2 + 4.18879) + 1, // Blue
            1.0); // Alpha
        color *= 0.5; // Adjust brightness
    }
    
    result[id.xy] = color;
}
